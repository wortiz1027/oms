import { Observable } from 'rxjs';
import { ClipboardParams, IClipboardResponse } from './interface';
/**
 * The following code is heavily copied from https://github.com/zenorocha/clipboard.js
 */
import * as ɵngcc0 from '@angular/core';
export declare class ClipboardService {
    document: any;
    private window;
    private copySubject;
    copyResponse$: Observable<IClipboardResponse>;
    private tempTextArea;
    private config;
    constructor(document: any, window: any);
    configure(config: ClipboardParams): void;
    copy(content: string): void;
    get isSupported(): boolean;
    isTargetValid(element: HTMLInputElement | HTMLTextAreaElement): boolean;
    /**
     * Attempts to copy from an input `targetElm`
     */
    copyFromInputElement(targetElm: HTMLInputElement | HTMLTextAreaElement, isFocus?: boolean): boolean;
    /**
     * This is a hack for IE11 to return `true` even if copy fails.
     */
    isCopySuccessInIE11(): boolean;
    /**
     * Creates a fake textarea element, sets its value from `text` property,
     * and makes a selection on it.
     */
    copyFromContent(content: string, container?: HTMLElement): boolean;
    /**
     * Remove temporary textarea if any exists.
     */
    destroy(container?: HTMLElement): void;
    /**
     * Select the target html input element.
     */
    private selectTarget;
    private copyText;
    /**
     * Moves focus away from `target` and back to the trigger, removes current selection.
     */
    private clearSelection;
    /**
     * Creates a fake textarea for copy command.
     */
    private createTempTextArea;
    /**
     * Pushes copy operation response to copySubject, to provide global access
     * to the response.
     */
    pushCopyResponse(response: IClipboardResponse): void;
    /**
     * @deprecated use pushCopyResponse instead.
     */
    pushCopyReponse(response: IClipboardResponse): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClipboardService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWNsaXBib2FyZC5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbIm5neC1jbGlwYm9hcmQuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFLQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1EQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgQ2xpcGJvYXJkUGFyYW1zLCBJQ2xpcGJvYXJkUmVzcG9uc2UgfSBmcm9tICcuL2ludGVyZmFjZSc7XHJcbi8qKlxyXG4gKiBUaGUgZm9sbG93aW5nIGNvZGUgaXMgaGVhdmlseSBjb3BpZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vemVub3JvY2hhL2NsaXBib2FyZC5qc1xyXG4gKi9cclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ2xpcGJvYXJkU2VydmljZSB7XHJcbiAgICBkb2N1bWVudDogYW55O1xyXG4gICAgcHJpdmF0ZSB3aW5kb3c7XHJcbiAgICBwcml2YXRlIGNvcHlTdWJqZWN0O1xyXG4gICAgY29weVJlc3BvbnNlJDogT2JzZXJ2YWJsZTxJQ2xpcGJvYXJkUmVzcG9uc2U+O1xyXG4gICAgcHJpdmF0ZSB0ZW1wVGV4dEFyZWE7XHJcbiAgICBwcml2YXRlIGNvbmZpZztcclxuICAgIGNvbnN0cnVjdG9yKGRvY3VtZW50OiBhbnksIHdpbmRvdzogYW55KTtcclxuICAgIGNvbmZpZ3VyZShjb25maWc6IENsaXBib2FyZFBhcmFtcyk6IHZvaWQ7XHJcbiAgICBjb3B5KGNvbnRlbnQ6IHN0cmluZyk6IHZvaWQ7XHJcbiAgICBnZXQgaXNTdXBwb3J0ZWQoKTogYm9vbGVhbjtcclxuICAgIGlzVGFyZ2V0VmFsaWQoZWxlbWVudDogSFRNTElucHV0RWxlbWVudCB8IEhUTUxUZXh0QXJlYUVsZW1lbnQpOiBib29sZWFuO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBdHRlbXB0cyB0byBjb3B5IGZyb20gYW4gaW5wdXQgYHRhcmdldEVsbWBcclxuICAgICAqL1xyXG4gICAgY29weUZyb21JbnB1dEVsZW1lbnQodGFyZ2V0RWxtOiBIVE1MSW5wdXRFbGVtZW50IHwgSFRNTFRleHRBcmVhRWxlbWVudCwgaXNGb2N1cz86IGJvb2xlYW4pOiBib29sZWFuO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGlzIGlzIGEgaGFjayBmb3IgSUUxMSB0byByZXR1cm4gYHRydWVgIGV2ZW4gaWYgY29weSBmYWlscy5cclxuICAgICAqL1xyXG4gICAgaXNDb3B5U3VjY2Vzc0luSUUxMSgpOiBib29sZWFuO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgZmFrZSB0ZXh0YXJlYSBlbGVtZW50LCBzZXRzIGl0cyB2YWx1ZSBmcm9tIGB0ZXh0YCBwcm9wZXJ0eSxcclxuICAgICAqIGFuZCBtYWtlcyBhIHNlbGVjdGlvbiBvbiBpdC5cclxuICAgICAqL1xyXG4gICAgY29weUZyb21Db250ZW50KGNvbnRlbnQ6IHN0cmluZywgY29udGFpbmVyPzogSFRNTEVsZW1lbnQpOiBib29sZWFuO1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmUgdGVtcG9yYXJ5IHRleHRhcmVhIGlmIGFueSBleGlzdHMuXHJcbiAgICAgKi9cclxuICAgIGRlc3Ryb3koY29udGFpbmVyPzogSFRNTEVsZW1lbnQpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBTZWxlY3QgdGhlIHRhcmdldCBodG1sIGlucHV0IGVsZW1lbnQuXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgc2VsZWN0VGFyZ2V0O1xyXG4gICAgcHJpdmF0ZSBjb3B5VGV4dDtcclxuICAgIC8qKlxyXG4gICAgICogTW92ZXMgZm9jdXMgYXdheSBmcm9tIGB0YXJnZXRgIGFuZCBiYWNrIHRvIHRoZSB0cmlnZ2VyLCByZW1vdmVzIGN1cnJlbnQgc2VsZWN0aW9uLlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGNsZWFyU2VsZWN0aW9uO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgZmFrZSB0ZXh0YXJlYSBmb3IgY29weSBjb21tYW5kLlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGNyZWF0ZVRlbXBUZXh0QXJlYTtcclxuICAgIC8qKlxyXG4gICAgICogUHVzaGVzIGNvcHkgb3BlcmF0aW9uIHJlc3BvbnNlIHRvIGNvcHlTdWJqZWN0LCB0byBwcm92aWRlIGdsb2JhbCBhY2Nlc3NcclxuICAgICAqIHRvIHRoZSByZXNwb25zZS5cclxuICAgICAqL1xyXG4gICAgcHVzaENvcHlSZXNwb25zZShyZXNwb25zZTogSUNsaXBib2FyZFJlc3BvbnNlKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogQGRlcHJlY2F0ZWQgdXNlIHB1c2hDb3B5UmVzcG9uc2UgaW5zdGVhZC5cclxuICAgICAqL1xyXG4gICAgcHVzaENvcHlSZXBvbnNlKHJlc3BvbnNlOiBJQ2xpcGJvYXJkUmVzcG9uc2UpOiB2b2lkO1xyXG59XHJcbiJdfQ==